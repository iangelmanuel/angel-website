---
import { Card, CardContent, CardFooter, CardHeader } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { buttonVariants } from "@/components/ui/button"

import { dateFormatter } from "@/lib/dateFormatter"

import { Calendar, ExternalLink } from "lucide-react"

import type { CollectionEntry } from "astro:content"
import type { LanguageData } from "@/types/language"

type Props = {
  t: LanguageData
  cert: CollectionEntry<"certificates">
}

const { t, cert } = Astro.props
---

<Card className="group h-auto gap-0 overflow-hidden pt-0 xl:h-[450px]">
  <CardHeader className="relative p-0">
    <div class="aspect-[4/3] overflow-hidden">
      <img
        src={cert.data.image}
        alt={`CertificaciÃ³n ${cert.data.title}`}
        class="object-cover transition-transform duration-300 group-hover:scale-105"
      />
    </div>
    <div class="absolute top-3 right-3">
      <Badge
        variant="certificateVariant"
        className="text-xs"
      >
        {cert.data.issuer}
      </Badge>
    </div>
  </CardHeader>

  <CardContent className="px-4">
    <div class="mb-3">
      <h4 class="mb-1 line-clamp-2 text-sm font-semibold">
        {cert.data.title}
      </h4>
      <div class="text-muted-foreground flex items-center gap-1 text-xs">
        <Calendar className="size-3" />
        <span>
          {
            dateFormatter(cert.data.issueDate!, {
              year: "numeric",
              month: "short",
              day: "numeric"
            })
          }
        </span>
      </div>
      {
        cert.data.credentialId && (
          <p class="text-muted-foreground mt-1 text-xs">
            ID: {cert.data.credentialId}
          </p>
        )
      }
    </div>

    <div class="mb-3">
      <div class="flex flex-wrap gap-1">
        {
          cert.data.skills!.slice(0, 3).map((skill) => (
            <Badge
              variant="outline"
              className="text-xs"
            >
              {skill}
            </Badge>
          ))
        }
        {
          cert.data.skills!.length > 3 && (
            <Badge
              variant="secondary"
              className="text-xs"
            >
              +{cert.data.skills!.length - 3}
            </Badge>
          )
        }
      </div>
    </div>
  </CardContent>

  <CardFooter className="mt-auto px-4">
    {
      cert.data.credentialUrl && (
        <a
          href={cert.data.credentialUrl}
          target="_blank"
          rel="noopener noreferrer"
          class:list={[
            "mt-3 inline-flex w-full items-center justify-center lg:mt-0 lg:w-auto",
            buttonVariants({ variant: "default", size: "sm" })
          ]}
        >
          <ExternalLink className="size-3" />
          {t.seo.certificatesPage.btnToVerify}
        </a>
      )
    }
  </CardFooter>
</Card>
